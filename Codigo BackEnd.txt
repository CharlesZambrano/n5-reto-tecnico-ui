n5-reto-tecnico-api\N5.Permissions.Api:

	// *? n5-reto-tecnico-api/N5.Permissions.Api/Controllers/PermissionController.cs

		using MediatR;
		using Microsoft.AspNetCore.Mvc;
		using N5.Permissions.Application.Commands.PermissionCommand;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Application.Queries.PermissionQuerie;

		namespace N5.Permissions.Api.Controllers
		{
			[ApiController]
		    [Authorize(Roles = "User,Administrator")]
			[Route("api/[controller]")]
			public class PermissionController : ControllerBase
			{
				private readonly IMediator _mediator;

				public PermissionController(IMediator mediator)
				{
					_mediator = mediator;
				}

				/// <summary>
				/// Obtiene todos los permisos.
				/// </summary>
				/// <returns>Lista de permisos.</returns>
				[HttpGet]
				[ProducesResponseType(StatusCodes.Status200OK)]
				public async Task<ActionResult<IEnumerable<PermissionDto>>> GetPermissions()
				{
					var result = await _mediator.Send(new GetPermissionsQuery());
					return Ok(result);
				}

				/// <summary>
				/// Obtiene un permiso por su ID.
				/// </summary>
				/// <param name="id">ID del permiso.</param>
				/// <returns>El permiso encontrado.</returns>
				[HttpGet("{id}")]
				[ProducesResponseType(StatusCodes.Status200OK)]
				[ProducesResponseType(StatusCodes.Status404NotFound)]
				public async Task<ActionResult<PermissionDto>> GetPermissionById(int id)
				{
					var result = await _mediator.Send(new GetPermissionByIdQuery(id));
					if (result == null)
						return NotFound();
					return Ok(result);
				}

				/// <summary>
				/// Crea un nuevo permiso.
				/// </summary>
				/// <param name="command">Comando con los datos del nuevo permiso.</param>
				/// <returns>El permiso creado.</returns>
				[HttpPost]
				[ProducesResponseType(StatusCodes.Status201Created)]
				[ProducesResponseType(StatusCodes.Status400BadRequest)]
				public async Task<ActionResult<PermissionDto>> CreatePermission([FromBody] CreatePermissionCommand command)
				{
					var dto = await _mediator.Send(command);
					return CreatedAtAction(nameof(GetPermissionById), new { id = dto.Id }, dto);
				}

				/// <summary>
				/// Modifica un permiso existente.
				/// </summary>
				/// <param name="id">ID del permiso a modificar.</param>
				/// <param name="command">Datos actualizados del permiso.</param>
				/// <returns>No content si es exitoso; BadRequest o NotFound en caso contrario.</returns>
				[HttpPut("{id}")]
				[ProducesResponseType(StatusCodes.Status204NoContent)]
				[ProducesResponseType(StatusCodes.Status404NotFound)]
				public async Task<IActionResult> UpdatePermission(int id, [FromBody] UpdatePermissionCommand command)
				{
					command.Id = id;
					var success = await _mediator.Send(command);
					if (!success)
						return NotFound();

					return NoContent();
				}

				/// <summary>
				/// Busca permisos usando un término de consulta.
				/// </summary>
				/// <param name="query">Texto a buscar.</param>
				/// <returns>Lista de permisos que coinciden con la búsqueda.</returns>
				[HttpGet("search")]
				[ProducesResponseType(StatusCodes.Status200OK)]
				public async Task<ActionResult<IEnumerable<PermissionDto>>> SearchPermissions([FromQuery] string query)
				{
					var result = await _mediator.Send(new SearchPermissionsQuery(query));
					return Ok(result);
				}

				/// <summary>
				/// Reindexa los permisos en Elasticsearch.
				/// </summary>
				/// <returns>Mensaje de éxito o error.</returns>
				[HttpPost("reindex")]
				[ProducesResponseType(StatusCodes.Status200OK)]
				[ProducesResponseType(StatusCodes.Status500InternalServerError)]
				public async Task<IActionResult> ReindexPermissions()
				{
					var success = await _mediator.Send(new ReindexPermissionsCommand());
					return success ? Ok("Reindexación completada") : StatusCode(500, "Error en la reindexación");
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Api/Controllers/PermissionTypeController.cs

		using MediatR;
		using Microsoft.AspNetCore.Mvc;
		using N5.Permissions.Application.Commands.PermissionTypeCommand;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Application.Queries.PermissionTypeQuerie;

		namespace N5.Permissions.Api.Controllers
		{
			[ApiController]
		    [Authorize(Roles = "Administrator")]
			[Route("api/[controller]")]
			public class PermissionTypeController : ControllerBase
			{
				private readonly IMediator _mediator;

				public PermissionTypeController(IMediator mediator)
				{
					_mediator = mediator;
				}

				/// <summary>
				/// Obtiene todos los tipos de permisos.
				/// </summary>
				/// <returns>Lista de tipos de permisos.</returns>
				[HttpGet]
				[ProducesResponseType(StatusCodes.Status200OK)]
				public async Task<ActionResult<IEnumerable<PermissionTypeDto>>> GetPermissionTypes()
				{
					var dtos = await _mediator.Send(new GetPermissionTypesQuery());
					return Ok(dtos);
				}

				/// <summary>
				/// Crea un nuevo tipo de permiso.
				/// </summary>
				/// <param name="command">Comando con los datos del nuevo tipo de permiso.</param>
				/// <returns>El tipo de permiso creado.</returns>
				[HttpPost]
				[ProducesResponseType(StatusCodes.Status201Created)]
				[ProducesResponseType(StatusCodes.Status400BadRequest)]
				public async Task<ActionResult<PermissionTypeDto>> CreatePermissionType([FromBody] CreatePermissionTypeCommand command)
				{
					var dto = await _mediator.Send(command);
					return CreatedAtAction(nameof(GetPermissionTypes), new { id = dto.Id }, dto);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Api/Controllers/AuthController.cs

		using Microsoft.AspNetCore.Mvc;

		[ApiController]
		[Route("api/[controller]")]
		public class AuthController : ControllerBase
		{
			private readonly TokenService _tokenService;
			private readonly UserService _userService;

			public AuthController(TokenService tokenService, UserService userService)
			{
				_tokenService = tokenService;
				_userService = userService;
			}

			[HttpPost("login")]
			public IActionResult Login([FromBody] LoginRequest request)
			{
				var (isValid, role) = _userService.ValidateCredentials(request.Username, request.Password);

				if (!isValid)
					return Unauthorized("Invalid credentials.");

				var token = _tokenService.GenerateToken(request.Username, role);
				return Ok(new { Token = token });
			}
		}

		public class LoginRequest
		{
			public string Username { get; set; }
			public string Password { get; set; }
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Api/Middlewares/ExceptionHandlingMiddleware.cs

		using System.Net;
		using System.Text.Json;
		using Microsoft.AspNetCore.Mvc;
		using System.ComponentModel.DataAnnotations;

		namespace N5.Permissions.Api.Middlewares
		{
			public class ExceptionHandlingMiddleware
			{
				private readonly RequestDelegate _next;
				private readonly ILogger<ExceptionHandlingMiddleware> _logger;

				public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
				{
					_next = next;
					_logger = logger;
				}

				public async Task InvokeAsync(HttpContext context)
				{
					try
					{
						await _next(context);
					}
					catch (Exception ex)
					{
						await HandleExceptionAsync(context, ex, _logger);
					}
				}

				private static Task HandleExceptionAsync(HttpContext context, Exception exception, ILogger logger)
				{
					HttpStatusCode statusCode = HttpStatusCode.InternalServerError;
					string title = "An error occurred while processing your request.";

					// Mapear excepciones específicas utilizando patrones
					switch (exception)
					{
						case ArgumentNullException _:
							statusCode = HttpStatusCode.BadRequest;
							title = "Bad Request";
							break;
						case ValidationException _:
							statusCode = HttpStatusCode.BadRequest;
							title = "Bad Request";
							break;
						case ArgumentException _:
							statusCode = HttpStatusCode.BadRequest;
							title = "Bad Request";
							break;
						case UnauthorizedAccessException _:
							statusCode = HttpStatusCode.Unauthorized;
							title = "Unauthorized";
							break;
						case KeyNotFoundException _:
							statusCode = HttpStatusCode.NotFound;
							title = "Not Found";
							break;
						case NotImplementedException _:
							statusCode = HttpStatusCode.NotImplemented;
							title = "Not Implemented";
							break;
					}

					logger.LogError(exception, "Unhandled exception occurred.");

					var problemDetails = new ProblemDetails
					{
						Status = (int)statusCode,
						Title = title,
						Detail = exception.Message,
						Instance = context.Request.Path
					};

					context.Response.ContentType = "application/json";
					context.Response.StatusCode = (int)statusCode;
					var options = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
					var result = JsonSerializer.Serialize(problemDetails, options);
					return context.Response.WriteAsync(result);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Api/Properties/launchSettings.json

		{
		"$schema": "http://json.schemastore.org/launchsettings.json",
		"iisSettings": {
			"windowsAuthentication": false,
			"anonymousAuthentication": true,
			"iisExpress": {
			"applicationUrl": "http://localhost:35939",
			"sslPort": 44393
			}
		},
		"profiles": {
			"http": {
			"commandName": "Project",
			"dotnetRunMessages": true,
			"launchBrowser": false,
			"applicationUrl": "http://localhost:5215",
			"environmentVariables": {
				"ASPNETCORE_ENVIRONMENT": "Development"
			}
			},
			"https": {
			"commandName": "Project",
			"dotnetRunMessages": true,
			"launchBrowser": false,
			"applicationUrl": "https://localhost:7023;http://localhost:5215",
			"environmentVariables": {
				"ASPNETCORE_ENVIRONMENT": "Development"
			}
			},
			"IIS Express": {
			"commandName": "IISExpress",
			"launchBrowser": false,
			"environmentVariables": {
				"ASPNETCORE_ENVIRONMENT": "Development"
			}
			}
		}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Api/appsettings.json
		
		{
		"Logging": {
			"LogLevel": {
			"Default": "Information",
			"Microsoft.AspNetCore": "Warning"
			}
		},
		"AllowedHosts": "*",
		"ConnectionStrings": {
			"DefaultConnection": "Server=localhost,1433;Database=PermissionsDb;User Id=sa;Password=sadmin;TrustServerCertificate=True"
		},
		"Elasticsearch": {
			"Uri": "http://localhost:9200"
		},
		"JwtSettings": {
			"Secret": "SuperSecretKey12345678901234567890!",
			"Issuer": "N5Company",
			"Audience": "N5CompanyUsers",
			"ExpirationInMinutes": 60
		},
		"Users": [
			{
			"Username": "admin",
			"Password": "AdminPass123",
			"Role": "Administrator"
			},
			{
			"Username": "user",
			"Password": "UserPass123",
			"Role": "User"
			}
		]
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Api/N5.Permissions.Api.http

		@N5.Permissions.Api_HostAddress = http://localhost:5215

		GET {{N5.Permissions.Api_HostAddress}}/
		Accept: application/json

		###

	// *? n5-reto-tecnico-api/N5.Permissions.Api/Program.cs

		using Microsoft.EntityFrameworkCore;
		using Microsoft.IdentityModel.Tokens;
		using N5.Permissions.Infrastructure.Persistence;
		using N5.Permissions.Infrastructure.Repositories;
		using N5.Permissions.Domain.Interfaces.Repositories;
		using N5.Permissions.Domain.Interfaces;
		using Microsoft.OpenApi.Models;
		using System.Reflection;
		using N5.Permissions.Infrastructure.Elasticsearch.Services;
		using Elastic.Clients.Elasticsearch;
		using System.Text;
		using System.Text.Json.Serialization;
		using N5.Permissions.Api.Middlewares;

		var builder = WebApplication.CreateBuilder(args);

		// Configuración de Elasticsearch
		var elasticsearchUri = builder.Configuration["Elasticsearch:Uri"];
		if (string.IsNullOrEmpty(elasticsearchUri))
		{
			throw new ArgumentNullException(nameof(elasticsearchUri), "Elasticsearch URI no está configurado en appsettings.json");
		}

		var settings = new ElasticsearchClientSettings(new Uri(elasticsearchUri))
			.DefaultIndex("permissions");

		builder.Services.AddSingleton(new ElasticsearchClient(settings));
		builder.Services.AddSingleton<ElasticsearchService>();

		// Configuración de JWT
		var jwtSettings = builder.Configuration.GetSection("JwtSettings");
		var secretKey = jwtSettings.GetValue<string>("Secret");

		builder.Services.AddAuthentication(options =>
		{
			options.DefaultAuthenticateScheme = "JwtBearer";
			options.DefaultChallengeScheme = "JwtBearer";
		})
		.AddJwtBearer("JwtBearer", options =>
		{
			options.TokenValidationParameters = new TokenValidationParameters
			{
				ValidateIssuer = true,
				ValidateAudience = true,
				ValidateLifetime = true,
				ValidateIssuerSigningKey = true,
				ValidIssuer = jwtSettings["Issuer"],
				ValidAudience = jwtSettings["Audience"],
				IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
			};
		});

		// Registrar servicios personalizados
		builder.Services.AddScoped<TokenService>();
		builder.Services.AddScoped<UserService>();

		// Agregar servicios
		builder.Services.AddControllers()
			.AddJsonOptions(options =>
			{
				options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
				options.JsonSerializerOptions.WriteIndented = true;
			});

		// Registrar MediatR
		builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblies(
			Assembly.GetExecutingAssembly(),
			Assembly.Load("N5.Permissions.Application")
		));

		// Registrar AutoMapper
		builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

		// Configurar SQL Server con EF Core
		builder.Services.AddDbContext<ApplicationDbContext>(options =>
			options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

		// Registrar Repositorios
		builder.Services.AddScoped<IPermissionRepository, PermissionRepository>();
		builder.Services.AddScoped<IPermissionTypeRepository, PermissionTypeRepository>();
		builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

		// Configurar Swagger
		builder.Services.AddEndpointsApiExplorer();
		builder.Services.AddSwaggerGen(c =>
		{
			c.SwaggerDoc("v1", new OpenApiInfo { Title = "N5 Permissions API", Version = "v1" });
			c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
			{
				Name = "Authorization",
				Type = SecuritySchemeType.Http,
				Scheme = "bearer",
				BearerFormat = "JWT",
				In = ParameterLocation.Header,
				Description = "Ingrese el token JWT generado"
			});
			c.AddSecurityRequirement(new OpenApiSecurityRequirement
			{
				{
					new OpenApiSecurityScheme
					{
						Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "Bearer" }
					},
					new string[] {}
				}
			});
		});

		var app = builder.Build();

		// Configurar el pipeline HTTP
		if (app.Environment.IsDevelopment())
		{
			app.UseSwagger();
			app.UseSwaggerUI(c =>
			{
				c.SwaggerEndpoint("/swagger/v1/swagger.json", "N5 Permissions API v1");
				c.RoutePrefix = string.Empty;
			});
		}

		app.UseMiddleware<ExceptionHandlingMiddleware>();

		app.UseHttpsRedirection();

		app.UseAuthentication();
		app.UseAuthorization();

		app.MapControllers();

		app.Run();

n5-reto-tecnico-api\N5.Permissions.Application:

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Commands/PermissionCommand/CreatePermissionCommand.cs

		using MediatR;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Commands.PermissionCommand
		{
			public class CreatePermissionCommand : IRequest<PermissionDto>
			{
				public string EmployeeName { get; set; }
				public string EmployeeSurname { get; set; }
				public int PermissionTypeId { get; set; }
				public DateTime PermissionDate { get; set; }

				public CreatePermissionCommand(string employeeName, string employeeSurname, int permissionTypeId, DateTime permissionDate)
				{
					EmployeeName = employeeName;
					EmployeeSurname = employeeSurname;
					PermissionTypeId = permissionTypeId;
					PermissionDate = permissionDate;
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Commands/PermissionCommand/ReindexPermissionsCommand.cs

		using MediatR;

		namespace N5.Permissions.Application.Commands.PermissionCommand
		{
			public class ReindexPermissionsCommand : IRequest<bool>
			{
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Commands/PermissionCommand/UpdatePermissionCommand.cs

		using MediatR;

		namespace N5.Permissions.Application.Commands.PermissionCommand
		{
			public class UpdatePermissionCommand : IRequest<bool>
			{
				public int Id { get; set; }
				public string EmployeeName { get; set; }
				public string EmployeeSurname { get; set; }
				public int PermissionTypeId { get; set; }
				public DateTime PermissionDate { get; set; }

				public UpdatePermissionCommand(int id, string employeeName, string employeeSurname, int permissionTypeId, DateTime permissionDate)
				{
					Id = id;
					EmployeeName = employeeName;
					EmployeeSurname = employeeSurname;
					PermissionTypeId = permissionTypeId;
					PermissionDate = permissionDate;
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Commands/PermissionTypeCommand/CreatePermissionTypeCommand.cs

		using MediatR;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Commands.PermissionTypeCommand
		{
			public class CreatePermissionTypeCommand : IRequest<PermissionTypeDto>
			{
				public required string Code { get; set; }
				public required string Description { get; set; }
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/DTOs/PermissionDto.cs

		namespace N5.Permissions.Application.DTOs
		{
			public class PermissionDto
			{
				public int Id { get; set; }
				public string EmployeeName { get; set; }
				public string EmployeeSurname { get; set; }
				public int PermissionTypeId { get; set; }
				public DateTime PermissionDate { get; set; }
				public PermissionTypeDto PermissionType { get; set; }
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/DTOs/PermissionTypeDto.cs

		namespace N5.Permissions.Application.DTOs
		{
			public class PermissionTypeDto
			{
				public int Id { get; set; }
				public string Description { get; set; }
				public string Code { get; set; }
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionHandler/CreatePermissionHandler.cs

		using MediatR;
		using AutoMapper;
		using N5.Permissions.Application.Commands.PermissionCommand;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Domain.Interfaces;
		using N5.Permissions.Infrastructure.Elasticsearch.Services;
		using System.ComponentModel.DataAnnotations;

		namespace N5.Permissions.Application.Handlers.PermissionHandler
		{
			public class CreatePermissionHandler : IRequestHandler<CreatePermissionCommand, PermissionDto>
			{
				private readonly IUnitOfWork _unitOfWork;
				private readonly ElasticsearchService _elasticsearchService;
				private readonly IMapper _mapper;

				public CreatePermissionHandler(IUnitOfWork unitOfWork, ElasticsearchService elasticsearchService, IMapper mapper)
				{
					_unitOfWork = unitOfWork;
					_elasticsearchService = elasticsearchService;
					_mapper = mapper;
				}

				public async Task<PermissionDto> Handle(CreatePermissionCommand request, CancellationToken cancellationToken)
				{
					// Validaciones en el handler
					if (string.IsNullOrWhiteSpace(request.EmployeeName))
						throw new ValidationException("Employee name is required.");
					if (string.IsNullOrWhiteSpace(request.EmployeeSurname))
						throw new ValidationException("Employee surname is required.");

					// Validación: PermissionDate debe ser solo fecha (sin hora)
					if (request.PermissionDate.TimeOfDay != TimeSpan.Zero)
						throw new ValidationException("PermissionDate must be in the format yyyy-MM-dd (time must be 00:00:00).");

					var permissionType = await _unitOfWork.PermissionTypes.GetByIdAsync(request.PermissionTypeId);
					if (permissionType == null)
						throw new ArgumentException("Invalid PermissionType ID");

					var permission = new Permission
					{
						EmployeeName = request.EmployeeName,
						EmployeeSurname = request.EmployeeSurname,
						PermissionTypeId = request.PermissionTypeId,
						PermissionType = permissionType,
						PermissionDate = request.PermissionDate
					};

					await _unitOfWork.Permissions.AddAsync(permission);
					await _unitOfWork.CommitAsync();

					await _elasticsearchService.IndexPermissionAsync(permission);

					return _mapper.Map<PermissionDto>(permission);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionHandler/GetPermissionByIdHandler.cs

		using MediatR;
		using AutoMapper;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Application.Queries.PermissionQuerie;
		using N5.Permissions.Domain.Interfaces;

		namespace N5.Permissions.Application.Handlers.PermissionHandler
		{
			public class GetPermissionByIdHandler : IRequestHandler<GetPermissionByIdQuery, PermissionDto?>
			{
				private readonly IUnitOfWork _unitOfWork;
				private readonly IMapper _mapper;

				public GetPermissionByIdHandler(IUnitOfWork unitOfWork, IMapper mapper)
				{
					_unitOfWork = unitOfWork;
					_mapper = mapper;
				}

				public async Task<PermissionDto?> Handle(GetPermissionByIdQuery request, CancellationToken cancellationToken)
				{
					var permission = await _unitOfWork.Permissions.GetByIdAsync(request.Id);
					if (permission == null)
						return null;
					return _mapper.Map<PermissionDto>(permission);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionHandler/GetPermissionsHandler.cs

		using MediatR;
		using AutoMapper;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Application.Queries.PermissionQuerie;
		using N5.Permissions.Infrastructure.Elasticsearch.Services;

		namespace N5.Permissions.Application.Handlers.PermissionHandler
		{
			public class GetPermissionsHandler : IRequestHandler<GetPermissionsQuery, IEnumerable<PermissionDto>>
			{
				private readonly ElasticsearchService _elasticsearchService;
				private readonly IMapper _mapper;

				public GetPermissionsHandler(ElasticsearchService elasticsearchService, IMapper mapper)
				{
					_elasticsearchService = elasticsearchService;
					_mapper = mapper;
				}

				public async Task<IEnumerable<PermissionDto>> Handle(GetPermissionsQuery request, CancellationToken cancellationToken)
				{
					// Se consultan todos los documentos de ES
					var esDocs = await _elasticsearchService.GetAllPermissionsAsync();

					// Mapear de EsPermissionDoc -> PermissionDto (usando EsPermissionDocProfile)
					return _mapper.Map<IEnumerable<PermissionDto>>(esDocs);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionHandler/ReindexPermissionsHandler.cs

		using MediatR;
		using N5.Permissions.Domain.Interfaces;
		using N5.Permissions.Infrastructure.Elasticsearch.Services;
		using N5.Permissions.Application.Commands.PermissionCommand;

		namespace N5.Permissions.Application.Handlers.PermissionHandler
		{
			// Handler para procesar el comando de reindexación de permisos
			public class ReindexPermissionsHandler : IRequestHandler<ReindexPermissionsCommand, bool>
			{
				private readonly IUnitOfWork _unitOfWork;
				private readonly ElasticsearchService _elasticsearchService;

				public ReindexPermissionsHandler(IUnitOfWork unitOfWork, ElasticsearchService elasticsearchService)
				{
					_unitOfWork = unitOfWork;
					_elasticsearchService = elasticsearchService;
				}

				public async Task<bool> Handle(ReindexPermissionsCommand request, CancellationToken cancellationToken)
				{
					var permissions = await _unitOfWork.Permissions.GetAllAsync();
					foreach (var permission in permissions)
					{
						await _elasticsearchService.IndexPermissionAsync(permission);
					}
					return true;
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionHandler/SearchPermissionsHandler.cs

		using MediatR;
		using AutoMapper;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Application.Queries.PermissionQuerie;
		using N5.Permissions.Infrastructure.Elasticsearch.Services;

		namespace N5.Permissions.Application.Handlers.PermissionHandler
		{
			public class SearchPermissionsHandler : IRequestHandler<SearchPermissionsQuery, IEnumerable<PermissionDto>>
			{
				private readonly ElasticsearchService _elasticsearchService;
				private readonly IMapper _mapper;

				public SearchPermissionsHandler(ElasticsearchService elasticsearchService, IMapper mapper)
				{
					_elasticsearchService = elasticsearchService;
					_mapper = mapper;
				}

				public async Task<IEnumerable<PermissionDto>> Handle(SearchPermissionsQuery request, CancellationToken cancellationToken)
				{
					// Buscar en Elasticsearch los documentos
					var esDocs = await _elasticsearchService.SearchPermissionsAsync(request.Query);

					// Mapear al DTO de salida
					return _mapper.Map<IEnumerable<PermissionDto>>(esDocs);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionHandler/UpdatePermissionHandler.cs

		using MediatR;
		using N5.Permissions.Application.Commands.PermissionCommand;
		using N5.Permissions.Domain.Interfaces;
		using N5.Permissions.Infrastructure.Elasticsearch.Services;
		using System.ComponentModel.DataAnnotations;

		namespace N5.Permissions.Application.Handlers.PermissionHandler
		{
			public class UpdatePermissionHandler : IRequestHandler<UpdatePermissionCommand, bool>
			{
				private readonly IUnitOfWork _unitOfWork;
				private readonly ElasticsearchService _elasticsearchService;

				public UpdatePermissionHandler(IUnitOfWork unitOfWork, ElasticsearchService elasticsearchService)
				{
					_unitOfWork = unitOfWork;
					_elasticsearchService = elasticsearchService;
				}

				public async Task<bool> Handle(UpdatePermissionCommand request, CancellationToken cancellationToken)
				{
					// Validaciones en el handler
					if (string.IsNullOrWhiteSpace(request.EmployeeName))
						throw new ValidationException("Employee name is required.");
					if (string.IsNullOrWhiteSpace(request.EmployeeSurname))
						throw new ValidationException("Employee surname is required.");

					// Validación: PermissionDate debe ser solo fecha (sin hora)
					if (request.PermissionDate.TimeOfDay != TimeSpan.Zero)
						throw new ValidationException("PermissionDate must be in the format yyyy-MM-dd (time must be 00:00:00).");

					var permission = await _unitOfWork.Permissions.GetByIdAsync(request.Id);
					if (permission == null) return false;

					var permissionType = await _unitOfWork.PermissionTypes.GetByIdAsync(request.PermissionTypeId);
					if (permissionType == null)
						throw new ArgumentException("Invalid PermissionType ID");

					permission.EmployeeName = request.EmployeeName;
					permission.EmployeeSurname = request.EmployeeSurname;
					permission.PermissionTypeId = request.PermissionTypeId;
					permission.PermissionType = permissionType;
					permission.PermissionDate = request.PermissionDate;

					await _unitOfWork.Permissions.UpdateAsync(permission);
					await _unitOfWork.CommitAsync();

					await _elasticsearchService.IndexPermissionAsync(permission);

					return true;
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionTypeHandler/CreatePermissionTypeHandler.cs

		using MediatR;
		using AutoMapper;
		using N5.Permissions.Application.Commands.PermissionTypeCommand;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Domain.Interfaces;
		using System.ComponentModel.DataAnnotations;

		namespace N5.Permissions.Application.Handlers.PermissionTypeHandler
		{
			public class CreatePermissionTypeHandler : IRequestHandler<CreatePermissionTypeCommand, PermissionTypeDto>
			{
				private readonly IUnitOfWork _unitOfWork;
				private readonly IMapper _mapper;

				public CreatePermissionTypeHandler(IUnitOfWork unitOfWork, IMapper mapper)
				{
					_unitOfWork = unitOfWork;
					_mapper = mapper;
				}

				public async Task<PermissionTypeDto> Handle(CreatePermissionTypeCommand request, CancellationToken cancellationToken)
				{
					// Validaciones en el handler
					if (string.IsNullOrWhiteSpace(request.Description))
						throw new ValidationException("Description is required.");
					if (string.IsNullOrWhiteSpace(request.Code))
						throw new ValidationException("Code is required.");
					if (request.Code.Length != 3)
						throw new ValidationException("Code must be exactly 3 characters long.");

					if (await _unitOfWork.PermissionTypes.ExistsByCode(request.Code))
						throw new ArgumentException("Permission type with this code already exists.");

					var permissionType = new PermissionType
					{
						Description = request.Description,
						Code = request.Code,
						Permissions = new List<Permission>()
					};

					await _unitOfWork.PermissionTypes.AddAsync(permissionType);
					await _unitOfWork.CommitAsync();

					return _mapper.Map<PermissionTypeDto>(permissionType);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Handlers/PermissionTypeHandler/GetPermissionTypesHandler.cs

		using MediatR;
		using AutoMapper;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Application.Queries.PermissionTypeQuerie;
		using N5.Permissions.Domain.Interfaces;

		namespace N5.Permissions.Application.Handlers.PermissionTypeHandler
		{
			public class GetPermissionTypesHandler : IRequestHandler<GetPermissionTypesQuery, IEnumerable<PermissionTypeDto>>
			{
				private readonly IUnitOfWork _unitOfWork;
				private readonly IMapper _mapper;

				public GetPermissionTypesHandler(IUnitOfWork unitOfWork, IMapper mapper)
				{
					_unitOfWork = unitOfWork;
					_mapper = mapper;
				}

				public async Task<IEnumerable<PermissionTypeDto>> Handle(GetPermissionTypesQuery request, CancellationToken cancellationToken)
				{
					var permissionTypes = await _unitOfWork.PermissionTypes.GetAllAsync();
					return _mapper.Map<IEnumerable<PermissionTypeDto>>(permissionTypes);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Profiles/PermissionProfile.cs

		using AutoMapper;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Profiles
		{
			public class PermissionProfile : Profile
			{
				public PermissionProfile()
				{
					CreateMap<Permission, PermissionDto>();
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Profiles/PermissionTypeProfile.cs

		using AutoMapper;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Profiles
		{
			public class PermissionTypeProfile : Profile
			{
				public PermissionTypeProfile()
				{
					CreateMap<PermissionType, PermissionTypeDto>();
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Profiles/EsPermissionDocProfile.cs

		using AutoMapper;
		using N5.Permissions.Application.DTOs;
		using N5.Permissions.Infrastructure.Elasticsearch.Models;

		namespace N5.Permissions.Application.Profiles
		{
			public class EsPermissionDocProfile : Profile
			{
				public EsPermissionDocProfile()
				{
					CreateMap<EsPermissionDoc, PermissionDto>()
						.ForMember(
							dest => dest.PermissionType,
							opt => opt.MapFrom(src => new PermissionTypeDto
							{
								Id = src.PermissionTypeId,
								Description = src.PermissionTypeDescription,
								Code = src.PermissionTypeCode
							})
						);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Queries/Permission/GetPermissionByIdQuery.cs

		using MediatR;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Queries.PermissionQuerie
		{
			public class GetPermissionByIdQuery : IRequest<PermissionDto?>
			{
				public int Id { get; }

				public GetPermissionByIdQuery(int id)
				{
					Id = id;
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Queries/Permission/GetPermissionQuery.cs

		using MediatR;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Queries.PermissionQuerie
		{
			public class GetPermissionsQuery : IRequest<IEnumerable<PermissionDto>> { }
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Queries/Permission/SearchPermissionsQuery.cs

		using MediatR;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Queries.PermissionQuerie
		{
			public class SearchPermissionsQuery : IRequest<IEnumerable<PermissionDto>>
			{
				public string Query { get; }

				public SearchPermissionsQuery(string query)
				{
					Query = query;
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Queries/PermissionType/GetPermissionTypesQuery.cs

		using MediatR;
		using N5.Permissions.Application.DTOs;

		namespace N5.Permissions.Application.Queries.PermissionTypeQuerie
		{
			public class GetPermissionTypesQuery : IRequest<IEnumerable<PermissionTypeDto>> { }
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Services/TokenService.cs

		using Microsoft.Extensions.Configuration;
		using Microsoft.IdentityModel.Tokens;
		using System.IdentityModel.Tokens.Jwt;
		using System.Security.Claims;
		using System.Text;

		public class TokenService
		{
			private readonly IConfiguration _configuration;

			public TokenService(IConfiguration configuration)
			{
				_configuration = configuration;
			}

			public string GenerateToken(string username, string role)
			{
				var jwtSettings = _configuration.GetSection("JwtSettings");
				var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings["Secret"]));

				var claims = new[]
				{
					new Claim(JwtRegisteredClaimNames.Sub, username),
					new Claim(ClaimTypes.Role, role),
					new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
				};

				var credentials = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);

				var token = new JwtSecurityToken(
					issuer: jwtSettings["Issuer"],
					audience: jwtSettings["Audience"],
					claims: claims,
					expires: DateTime.UtcNow.AddMinutes(jwtSettings.GetValue<int>("ExpirationInMinutes")),
					signingCredentials: credentials
				);

				return new JwtSecurityTokenHandler().WriteToken(token);
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Application/Services/UserService.cs

		using Microsoft.Extensions.Configuration;

		public class UserService
		{
			private readonly IConfiguration _configuration;

			public UserService(IConfiguration configuration)
			{
				_configuration = configuration;
			}

			public (bool isValid, string role) ValidateCredentials(string username, string password)
			{
				var users = _configuration.GetSection("Users").Get<List<UserCredentials>>();

				var user = users.FirstOrDefault(u => u.Username == username && u.Password == password);

				return user != null ? (true, user.Role) : (false, null);
			}
		}

		public class UserCredentials
		{
			public string Username { get; set; }
			public string Password { get; set; }
			public string Role { get; set; }
		}
		
n5-reto-tecnico-api\N5.Permissions.Domain:

	// *? n5-reto-tecnico-api/N5.Permissions.Domain/Entities/Permission.cs

		using System.ComponentModel.DataAnnotations;
		using System.ComponentModel.DataAnnotations.Schema;

		namespace N5.Permissions.Domain.Entities
		{
			public class Permission
			{
				[Key]
				[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
				public int Id { get; set; }

				[Required]
				[MaxLength(100)]
				public required string EmployeeName { get; set; }

				[Required]
				[MaxLength(100)]
				public required string EmployeeSurname { get; set; }

				[Required]
				public required int PermissionTypeId { get; set; } // Clave foránea

				[Required]
				public required DateTime PermissionDate { get; set; }

				// Relación con PermissionType
				[ForeignKey("PermissionTypeId")]
				public required PermissionType PermissionType { get; set; }
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Domain/Entities/PermissionType.cs

		using System.ComponentModel.DataAnnotations;
		using System.ComponentModel.DataAnnotations.Schema;

		namespace N5.Permissions.Domain.Entities
		{
			public class PermissionType
			{
				[Key]
				[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
				public int Id { get; set; }

				[Required]
				[MaxLength(255)]
				public required string Description { get; set; }

				[Required]
				[MaxLength(3)]
				public required string Code { get; set; }

				public required ICollection<Permission> Permissions { get; set; }
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Domain/Interfaces/Repositories/IPermissionRepository.cs

		using N5.Permissions.Domain.Entities;

		namespace N5.Permissions.Domain.Interfaces.Repositories
		{
			public interface IPermissionRepository
			{
				Task<IEnumerable<Permission>> GetAllAsync();
				Task<Permission?> GetByIdAsync(int id);
				Task AddAsync(Permission permission);
				Task UpdateAsync(Permission permission);
				Task DeleteAsync(int id);
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Domain/Interfaces/Repositories/IPermissionTypeRepository.cs

		using N5.Permissions.Domain.Entities;

		namespace N5.Permissions.Domain.Interfaces.Repositories
		{
			public interface IPermissionTypeRepository
			{
				Task<IEnumerable<PermissionType>> GetAllAsync();
				Task<PermissionType?> GetByIdAsync(int id);
				Task AddAsync(PermissionType permissionType);
				Task<bool> ExistsByCode(string code);
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Domain/Interfaces/IUnitOfWork.cs

		using N5.Permissions.Domain.Interfaces.Repositories;

		namespace N5.Permissions.Domain.Interfaces
		{
			public interface IUnitOfWork : IDisposable
			{
				IPermissionRepository Permissions { get; }
				IPermissionTypeRepository PermissionTypes { get; }
				Task<int> CommitAsync();
			}
		}

n5-reto-tecnico-api\N5.Permissions.Infrastructure:

	// *? n5-reto-tecnico-api/N5.Permissions.Infrastructure/Elasticsearch/Services/ElasticsearchService.cs

		using Elastic.Clients.Elasticsearch;
		using Microsoft.Extensions.Logging;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Infrastructure.Elasticsearch.Models;

		namespace N5.Permissions.Infrastructure.Elasticsearch.Services
		{
			public class ElasticsearchService
			{
				private readonly ElasticsearchClient _elasticClient;
				private readonly ILogger<ElasticsearchService> _logger;
				private const string IndexName = "permissions";

				public ElasticsearchService(ElasticsearchClient elasticClient, ILogger<ElasticsearchService> logger)
				{
					_elasticClient = elasticClient;
					_logger = logger;
				}

				/// <summary>
				/// Indexa (o actualiza) un permiso en Elasticsearch,
				/// usando un documento "EsPermissionDoc" con la info necesaria.
				/// </summary>
				public async Task IndexPermissionAsync(Permission permission)
				{
					try
					{
						var doc = new EsPermissionDoc
						{
							Id = permission.Id,
							EmployeeName = permission.EmployeeName,
							EmployeeSurname = permission.EmployeeSurname,
							PermissionTypeId = permission.PermissionTypeId,
							PermissionDate = permission.PermissionDate,
							PermissionTypeDescription = permission.PermissionType?.Description,
							PermissionTypeCode = permission.PermissionType?.Code
						};

						var response = await _elasticClient.IndexAsync(
							doc,
							idx => idx.Index(IndexName).Id(doc.Id)
						);

						if (!response.IsValidResponse)
						{
							_logger.LogError($"Error al indexar el permiso en Elasticsearch: {response.DebugInformation}");
						}
					}
					catch (Exception ex)
					{
						_logger.LogError($"Excepción al indexar el permiso en Elasticsearch: {ex.Message}");
					}
				}

				/// <summary>
				/// Obtiene todos los documentos de permisos desde Elasticsearch (EsPermissionDoc).
				/// </summary>
				public async Task<IEnumerable<EsPermissionDoc>> GetAllPermissionsAsync()
				{
					try
					{
						var response = await _elasticClient.SearchAsync<EsPermissionDoc>(s => s
							.Index(IndexName)
							.Query(q => q.MatchAll(m => { }))
							.Size(1000)
						);

						if (response.IsValidResponse)
						{
							return response.Documents;
						}
						else
						{
							_logger.LogError($"Error al obtener permisos de Elasticsearch: {response.DebugInformation}");
							return Enumerable.Empty<EsPermissionDoc>();
						}
					}
					catch (Exception ex)
					{
						_logger.LogError($"Excepción al obtener permisos de Elasticsearch: {ex.Message}");
						return Enumerable.Empty<EsPermissionDoc>();
					}
				}

				/// <summary>
				/// Busca permisos en Elasticsearch usando un término de búsqueda (full-text).
				/// </summary>
				public async Task<IEnumerable<EsPermissionDoc>> SearchPermissionsAsync(string query)
				{
					try
					{
						var response = await _elasticClient.SearchAsync<EsPermissionDoc>(s => s
							.Index(IndexName)
							.Query(q => q
								.QueryString(qs => qs
									.Query(query)
								)
							)
						);

						if (response.IsValidResponse)
						{
							return response.Documents;
						}
						else
						{
							_logger.LogError($"Error al buscar permisos en Elasticsearch: {response.DebugInformation}");
							return Enumerable.Empty<EsPermissionDoc>();
						}
					}
					catch (Exception ex)
					{
						_logger.LogError($"Excepción al buscar permisos en Elasticsearch: {ex.Message}");
						return Enumerable.Empty<EsPermissionDoc>();
					}
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Infrastructure/Elasticsearch/Models/EsPermissionDoc.cs

		namespace N5.Permissions.Infrastructure.Elasticsearch.Models
		{
			public class EsPermissionDoc
			{
				public int Id { get; set; }
				public string? EmployeeName { get; set; }
				public string? EmployeeSurname { get; set; }
				public int PermissionTypeId { get; set; }
				public DateTime PermissionDate { get; set; }
				public string? PermissionTypeDescription { get; set; }
				public string? PermissionTypeCode { get; set; }
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Infrastructure/Persistence/ApplicationDbContext.cs

		using Microsoft.EntityFrameworkCore;
		using N5.Permissions.Domain.Entities;

		namespace N5.Permissions.Infrastructure.Persistence
		{
			public class ApplicationDbContext : DbContext
			{
				public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

				public DbSet<Permission> Permissions { get; set; }
				public DbSet<PermissionType> PermissionTypes { get; set; }

				protected override void OnModelCreating(ModelBuilder modelBuilder)
				{
					base.OnModelCreating(modelBuilder);

					// Definir relación 1-N entre Permission y PermissionType
					modelBuilder.Entity<Permission>()
						.HasOne(p => p.PermissionType)
						.WithMany(pt => pt.Permissions)
						.HasForeignKey(p => p.PermissionTypeId);

					// Asegurar que Code en PermissionType sea único
					modelBuilder.Entity<PermissionType>()
						.HasIndex(pt => pt.Code)
						.IsUnique();
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Infrastructure/Repositories/PermissionRepository.cs

		using Microsoft.EntityFrameworkCore;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Domain.Interfaces.Repositories;
		using N5.Permissions.Infrastructure.Persistence;

		namespace N5.Permissions.Infrastructure.Repositories
		{
			public class PermissionRepository : IPermissionRepository
			{
				private readonly ApplicationDbContext _context;

				public PermissionRepository(ApplicationDbContext context)
				{
					_context = context;
				}

				public async Task<IEnumerable<Permission>> GetAllAsync()
				{
					return await _context.Permissions
						.Include(p => p.PermissionType)
						.ToListAsync();
				}

				public async Task<Permission?> GetByIdAsync(int id)
				{
					return await _context.Permissions
						.Include(p => p.PermissionType)
						.FirstOrDefaultAsync(p => p.Id == id);
				}

				public async Task AddAsync(Permission permission)
				{
					await _context.Permissions.AddAsync(permission);
					await _context.SaveChangesAsync();
				}

				public async Task UpdateAsync(Permission permission)
				{
					_context.Permissions.Update(permission);
					await _context.SaveChangesAsync();
				}

				public async Task DeleteAsync(int id)
				{
					var permission = await _context.Permissions.FindAsync(id);
					if (permission != null)
					{
						_context.Permissions.Remove(permission);
						await _context.SaveChangesAsync();
					}
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Infrastructure/Repositories/PermissionTypeRepository.cs

		using Microsoft.EntityFrameworkCore;
		using N5.Permissions.Domain.Entities;
		using N5.Permissions.Domain.Interfaces.Repositories;
		using N5.Permissions.Infrastructure.Persistence;

		namespace N5.Permissions.Infrastructure.Repositories
		{
			public class PermissionTypeRepository : IPermissionTypeRepository
			{
				private readonly ApplicationDbContext _context;

				public PermissionTypeRepository(ApplicationDbContext context)
				{
					_context = context;
				}

				public async Task<IEnumerable<PermissionType>> GetAllAsync()
				{
					return await _context.PermissionTypes
						.Include(p => p.Permissions)
						.ToListAsync();
				}

				public async Task<PermissionType?> GetByIdAsync(int id)
				{
					return await _context.PermissionTypes
						.Include(p => p.Permissions)
						.FirstOrDefaultAsync(p => p.Id == id);
				}

				public async Task<bool> ExistsByCode(string code)
				{
					return await _context.PermissionTypes.AnyAsync(pt => pt.Code == code);
				}

				public async Task AddAsync(PermissionType permissionType)
				{
					await _context.PermissionTypes.AddAsync(permissionType);
				}
			}
		}

	// *? n5-reto-tecnico-api/N5.Permissions.Infrastructure/Repositories/UnitOfWork.cs

		using N5.Permissions.Domain.Interfaces;
		using N5.Permissions.Domain.Interfaces.Repositories;
		using N5.Permissions.Infrastructure.Persistence;

		namespace N5.Permissions.Infrastructure.Repositories
		{
			public class UnitOfWork : IUnitOfWork
			{
				private readonly ApplicationDbContext _context;
				public IPermissionRepository Permissions { get; }
				public IPermissionTypeRepository PermissionTypes { get; }

				public UnitOfWork(ApplicationDbContext context,
								IPermissionRepository permissionRepository,
								IPermissionTypeRepository permissionTypeRepository)
				{
					_context = context;
					Permissions = permissionRepository;
					PermissionTypes = permissionTypeRepository;
				}

				public async Task<int> CommitAsync()
				{
					return await _context.SaveChangesAsync();
				}

				public void Dispose()
				{
					_context.Dispose();
				}
			}
		}

Contenedor para ElasticSearch

	// *? n5-reto-tecnico-api/docker-compose.yml

		version: "3.8"

		services:
		  elasticsearch:
		    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
		    container_name: elasticsearch
		    environment:
		      - discovery.type=single-node
		      - ELASTICSEARCH_USERNAME=elastic
		      - ELASTICSEARCH_PASSWORD=elasticpassword
		      - xpack.security.enabled=false
		    ports:
		      - "9200:9200"
		      - "9300:9300"
		    volumes:
		      - esdata:/usr/share/elasticsearch/data

		volumes:
		  esdata:
		    driver: local